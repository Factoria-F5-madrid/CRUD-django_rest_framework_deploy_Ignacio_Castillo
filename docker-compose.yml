# Especifica la versión del formato de docker-compose a usar
version: '3.8'

# Define los servicios (contenedores) que componen la aplicación
services:
  
  # Servicio para la aplicación web Django
  web:
    # Construye la imagen usando el Dockerfile en el directorio actual (.)
    build: .
    
    # Mapeo de puertos: puerto_host:puerto_contenedor
    # Puerto 8000 de tu máquina → Puerto 8010 del contenedor
    ports:
      - "8000:8010"
    
    # Monta volúmenes: directorio_host:directorio_contenedor
    # El directorio actual (.) se monta en /app dentro del contenedor
    # Permite ver cambios en tiempo real sin reconstruir la imagen
    volumes:
      - .:/app
    
    # Variables de entorno que estarán disponibles dentro del contenedor
    environment:
      - DEBUG=1                    # Activa el modo debug de Django
      - DB_NAME=${DB_NAME}         # Nombre de la base de datos (desde .env.docker)
      - DB_USER=${DB_USER}         # Usuario de la base de datos (desde .env.docker)
      - DB_PASSWORD=${DB_PASSWORD} # Contraseña de la base de datos (desde .env.docker)
      - DB_HOST=db                 # Host de la base de datos (nombre del servicio MySQL)
      - DB_PORT=3306               # Puerto de MySQL (puerto estándar)
    
    # Define dependencias: este servicio espera a que 'db' esté disponible
    depends_on:
      - db  # El contenedor web esperará a que el contenedor db esté corriendo
    
    # Archivo adicional de variables de entorno
    # Las variables en este archivo estarán disponibles en el contenedor
    env_file:
      - .env.docker

  # Servicio para la base de datos MySQL
  db:
    # Usa la imagen oficial de MySQL versión 8 desde Docker Hub
    image: mysql:8
    
    # Variables de entorno específicas para configurar MySQL
    environment:
      MYSQL_DATABASE: ${DB_NAME}        # Crea automáticamente esta base de datos
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD} # Establece la contraseña del usuario root
    
    # Mapeo de puertos para MySQL
    # Puerto 3307 de tu máquina → Puerto 3306 del contenedor
    # Usa 3307 para evitar conflictos si tienes MySQL local en 3306
    ports:
      - "3307:3306"
    
    # Volumen persistente para los datos de MySQL
    # Los datos se guardan en el volumen 'mysql_data' para que persistan
    volumes:
      - mysql_data:/var/lib/mysql

# Define volúmenes con nombre que pueden ser reutilizados
volumes:
  # Volumen persistente para almacenar los datos de MySQL
  # Los datos sobrevivirán aunque se eliminen los contenedores
  mysql_data: